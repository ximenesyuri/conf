#! /usr/bin/env vim

" PLUGIN config
    call plug#begin('~/.vim/plugged')
"> Autocompletion
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'yaegassy/coc-pylsp', {'do': 'yarn install --frozen-lockfile'}
    Plug 'yaegassy/coc-nginx', {'do': 'yarn install --frozen-lockfile'}
    Plug 'maralla/completor.vim', { 'for': 'aichat' }
"> Snippets
    Plug 'SirVer/ultisnips' 
"> Basic Stuff
    Plug 'farmergreg/vim-lastplace'
    Plug 'tpope/vim-commentary'
    Plug 'skywind3000/asyncrun.vim'
    Plug 'Yggdroot/indentLine'
"> Syntax  
    Plug 'inkarkat/vim-ingo-library'
    Plug 'inkarkat/vim-SyntaxRange'    
    Plug 'vim-python/python-syntax'
    Plug 'Glench/Vim-Jinja2-Syntax'
"> Other
    Plug 'madox2/vim-ai'
    call plug#end()
"> Automatically install missing plugins
    autocmd VimEnter *
  \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \|   PlugInstall --sync | q
  \| endif

"NETRW
"> Layout
">> hide banner
    let g:netrw_banner = 0
">> allow toggle hide
    let g:netrw_hide= 1
">> hide dot files by default
    let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
">> windows size
    let g:netrw_winsize = 15
">> open files in new window
    if argv(0) ==# '.'
        let g:netrw_browse_split = 0
    else
        let g:netrw_browse_split = 4
    endif   
">> sync current and browsing directories
    let g:netrw_keepdir = 0
">> directories on the top, files below
    let g:netrw_sort_sequence = '[\/]$,*'
">> change of directory when opening a file
    set autochdir
">> set the default application to be called with "x"
    let g:netrw_browsex_viewer= "x"
">> keep cursor position
    let g:netrw_fastbrowse = 2
">> change the highlight of markded files
    hi! link netrwMarkFile Search
">> print in /tmp/vim_cwd the current working directory when Netrw is closed
    autocmd BufDelete * if &ft ==# 'netrw' | let g:cwd = expand('%:p:h') | call writefile([g:cwd], '/tmp/vim_cwd') | endif
"> Hotkeys 
    augroup netrw_setup | au! 
        au FileType netrw  nmap <leader>o :Lexplore<cr>
">> 'p' to display the current directory. 'h' to toggle hidden files
        au FileType netrw nmap <buffer> p :pwd<cr>
        au FileType netrw nmap <buffer> h gh
">> 'a' to mark files. 'w', and  'e' to execute command for marked files.
        au FileType netrw nmap <buffer> a mf
        au FileType netrw nmap <buffer> w mx
        au FileType netrw nmap <buffer> e mX
">> 'left' and 'right'/'enter' to change directory.
        au FileType netrw nmap <buffer> <right> <cr>cd
        au FileType netrw nmap <buffer> <left> -cd
">> 'r' to refresh Netrw
        au FileType netrw nmap <buffer> r <c-l>
">> 'mkf', 'd', 'D' , 'mv' and 'cp' to do the basic stuff
        au FileType netrw nmap <buffer> mkf cd:AsyncRun touch 
        au FileType netrw nmap <buffer> mkd cd:AsyncRun mkdir 
        au FileType netrw nmap <buffer> .mf cd:AsyncRun touch 
        au FileType netrw nmap <buffer> .md cd:AsyncRun mkdir 
        au FileType netrw nmap <buffer> d cd:AsyncRun .d 
        au FileType netrw nmap <buffer> rm cd:AsyncRun rm -r 
        au FileType netrw nmap <buffer> mv cd:AsyncRun mv 
        au FileType netrw nmap <buffer> cp cd:AsyncRun cp -r 
    augroup END

" ASYNCRUN
"> '!' to open AsyncRun. ']o' to open the logs window
    nnoremap ! :AsyncRun
    nnoremap <leader>o :copen<cr>
    inoremap <leader>o <esc>:copen<cr>

" VIM-COMMENTARY
" >> ']p' to comment/uncomment paragraph 
    imap <leader>p <esc>gcap:startinsert<cr>
    nmap <leader>p gcap:startinsert<cr>
    vmap <leader>p :Commentary<cr>:startinsert<cr>

" INDENTLINE
">> disabling in markdown
    let g:indentLine_fileTypeExclude = ['markdown', 'md']
    let g:indentLine_bufTypeExclude = ['help', 'terminal']
">> avoid conflict with links conceal
    let g:indentLine_concealcursor=""
    let g:indentLine_conceallevel=2
">> ']i' to toggle indentline
    inoremap <leader>i <esc>:IndentLinesToggle<cr>:startinsert<cr>
    nnoremap <leader>i :IndentLinesToggle<cr>:startinsert<cr>

" ULTISNIPS
"> set the snippets directory
    let g:UltiSnipsSnippetDirectories=[expand($YX_VIM . '/snippets')]
"> set the filetype
    autocmd bufnewfile *.snippets :set filetype=snippets
"> set the key to expand the snippets
    let g:UltiSnipsExpandTrigger="<s-tab>"
"> set the key to change the focus inside the snippet
    let g:UltiSnipsJumpForwardTrigger="<s-tab>"
    let g:UltiSnipsJumpBackwardTrigger="<c-tab>"

" COC
">> set completion keys
    inoremap <expr> <down> coc#pum#visible() ? coc#pum#next(1) : (pumvisible() ? "\<lt>down>" : "\<lt>c-o>gj")
    inoremap <expr> <up> coc#pum#visible() ? coc#pum#prev(1) : (pumvisible() ? "\<lt>up>" : "\<lt>c-o>gk")
    inoremap <expr> <tab> coc#pum#visible() ? coc#pum#insert() : "\<tab>"
    inoremap <expr> <cr> coc#pum#visible() ? coc#pum#insert() : "\<cr>"
">> 'ctrl+d' to show documentation
    function! ShowDocumentation()
        if CocAction('hasProvider', 'hover')
            call CocAction('doHover')
            sleep 1
            startinsert
        endif
    endfunction
    inoremap <silent> <c-d> <esc>:call ShowDocumentation()<cr>
">> '<leader>d' to go to definition
    nnoremap <leader>d :rightbelow call CocActionAsync('jumpDefinition', 'vsplit')<CR>:vert resize 80<CR>
    inoremap <leader>d <esc>:rightbelow call CocActionAsync('jumpDefinition', 'vsplit')<CR>:vert resize 80<CR>
" >> 'ctrl-p' to open preview in markdown file
    autocmd FileType markdown inoremap <c-p> <esc>:CocCommand markdown-preview-enhanced.openPreview<cr>i

" SYNTAX RANGE
">> highlight languagens in markdown files
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```bash', '```', 'bash', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```c', '```', 'c', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```cpp', '```', 'cpp', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```c++', '```', 'cpp', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```csharp', '```', 'cs', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```c#', '```', 'cs', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```css', '```', 'css', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```fsharp', '```', 'fs', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```go', '```', 'go', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```html', '```', 'html', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```java', '```', 'java', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```javascript', '```', 'javascript', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```js', '```', 'javascript', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```kotlin', '```', 'kotlin', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```lua', '```', 'lua', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```mermaid', '```', 'mermaid', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```php', '```', 'php', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```python', '```', 'python', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```ruby', '```', 'ruby', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```rust', '```', 'rust', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```swift', '```', 'swift', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```tex', '```', 'tex', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```typescript', '```', 'typescript', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```ts', '```', 'typescript', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```vim', '```', 'vim', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```yml', '```', 'yaml', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```yaml', '```', 'yaml', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include(':tex', ':', 'tex', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include(':::tex', ':::', 'tex', 'NonText')
    autocmd BufWinEnter,FileType python call SyntaxRange#Include('f"""jinja', '"""', 'jinja', 'NonText')

" VIM-AI
">> setting the token file
    let g:vim_ai_token_file_path = "/home/yx/sec/openrouter.token"
">> setting roles file
    let g:vim_ai_roles_config_file = '/home/yx/conf/vim/roles.ini'
">> setting the default model
    let g:vim_ai_model = "gpt-4.1"
">> setting the default initial prompt for ':AIChat'
    let s:initial_chat_prompt =<< trim END
    >>> system

    You are a experienced software developer and mathematician. 
    You have read all the official documentations and replies always based on them.
    If you attach a code block add syntax type after ``` to enable syntax highlighting.
    If I ask for a code you should reply only with the code, without any explanation, among I explicit ask for more details.
    If I ask you to some modification in code, you should reply only with the parts I need to modify with a detailied explanation of them.
    END

" >> configuring the 'AIChat' command
    let g:vim_ai_chat = {
    \  "engine": "chat",
    \  "options": {
    \    "model": g:vim_ai_model,
    \    "endpoint_url": "https://api.openai.com/v1/chat/completions",
    \    "max_tokens": 0,
    \    "temperature": 1,
    \    "request_timeout": 40,
    \    "enable_auth": 1,
    \    "selection_boundary": "",
    \    "initial_prompt": s:initial_chat_prompt,
    \  },
    \  "ui": {
    \    "code_syntax_enabled": 1,
    \    "populate_options": 0,
    \    "open_chat_command": "preset_below",
    \    "scratch_buffer_keep_open": 0,
    \    "paste_mode": 1,
    \  },
    \}

    let g:vim_ai_complete = g:vim_ai_chat
    let g:vim_ai_edit = g:vim_ai_chat
">> 'ctrl+g' to ask a question
    inoremap <c-g> <esc>:AIChat 
    nnoremap <c-g> :AIChat
    vnoremap <c-g> :AIChat
">> 'ctrl+e' in visual mode to edit
    vnoremap <c-e> :AIEdit
">> add syntax highlight
    autocmd BufWinEnter,FileType aichat call SyntaxRange#Include('```bash', '```', 'bash', 'NonText')
    autocmd BufWinEnter,FileType aichat call SyntaxRange#Include('```css', '```', 'css', 'NonText')
    autocmd BufWinEnter,FileType aichat call SyntaxRange#Include('```html', '```', 'html', 'NonText')
    autocmd BufWinEnter,FileType aichat call SyntaxRange#Include('```js', '```', 'javascript', 'NonText')
    autocmd BufWinEnter,FileType aichat call SyntaxRange#Include('```python', '```', 'python', 'NonText')
    autocmd BufWinEnter,FileType aichat call SyntaxRange#Include('```yml', '```', 'yaml', 'NonText')
    autocmd BufWinEnter,FileType aichat call SyntaxRange#Include('```yaml', '```', 'yaml', 'NonText')
    
" PYTHON-SYNTAX
    let g:python_highlight_all = 1

" GENERAL
    autocmd BufRead,BufNewFile *.html set filetype=jinja

" > COPY
" >> copy last code block
function! s:copy_last_code_block()
    let l:save_pos = getpos('.')
    try
        let l:found = search('^\s*```[a-zA-Z]\+', 'bW')
        if l:found
            normal! j
            let l:start_content_pos = getpos('.')

            let l:end_found = search('^\s*```$', 'W')
            if l:end_found
                normal! k
                let l:end_content_pos = getpos('.')

                execute l:start_content_pos[1] . ',' . l:end_content_pos[1] . 'y+'
                echom 'Code block content copied to clipboard.'
            else
                echom 'End of code block not found.'
            endif
        else
            echom 'No code block found with a language specifier.'
        endif
    catch /.*/
        echom 'Error occurred: ' . v:exception
    endtry

    call setpos('.', l:save_pos)
endfunction

nnoremap <leader>cc :call <SID>copy_last_code_block()<CR> 
inoremap <leader>cc <esc>:call <SID>copy_last_code_block()<CR>i

function! MarkdownCustomHighlight()
    if exists("b:markdown_custom_highlight_loaded")
        return
    endif
    let b:markdown_custom_highlight_loaded = 1
    silent! syntax clear markdownSphinxAnchor
    silent! syntax clear markdownSphinxAnchorParen
    silent! syntax clear markdownSphinxAnchorContent
    silent! syntax clear markdownSphinxAnchorEquals
    silent! syntax clear markdownAutolink
    silent! syntax clear markdownAutolinkDelimiter
    silent! syntax clear markdownAutolinkContent

    syntax region markdownSphinxAnchor start=/\v\(([^)]*)\)=/ end=/=/ keepend oneline contains=markdownSphinxAnchorParen,markdownSphinxAnchorContent,markdownSphinxAnchorEquals
    syntax match markdownSphinxAnchorParen /(/ contained containedin=markdownSphinxAnchor
    syntax match markdownSphinxAnchorEquals /)=/ contained containedin=markdownSphinxAnchor
    syntax match markdownSphinxAnchorContent /\v[^()_=]+/ contained containedin=markdownSphinxAnchor
    syntax region markdownAutolink start=/{/ end=/}/ keepend oneline contains=markdownAutolinkDelimiter,markdownAutolinkContent
    syntax match markdownAutolinkContent /\v[^{}]+/ contained containedin=markdownAutolink
    syntax match markdownAutolinkDelimiter /{/ contained containedin=markdownAutolink
    syntax match markdownAutolinkDelimiter /}/ contained containedin=markdownAutolink

    hi link markdownSphinxAnchorParen   Comment
    hi link markdownSphinxAnchorEquals  Comment
    hi markdownSphinxAnchorContent ctermfg=4 ctermbg=none cterm=underline
    hi link markdownAutolinkDelimiter   Comment
    hi markdownAutolinkContent     ctermfg=1 ctermbg=none cterm=underline
endfunction

autocmd FileType markdown call MarkdownCustomHighlight()

function! PythonCustomHighlight()
    if exists("b:python_custom_highlight_loaded")
        return
    endif
    let b:html_custom_highlight_loaded = 1
    silent! syntax clear pythonDelimiter
    silent! syntax clear pythonEnd
    
    syntax match pythonDelimiter /{/
    syntax match pythonDelimiter /}/
    syntax match pythonDelimiter /\[/
    syntax match pythonDelimiter /\]/
    syntax match pythonDelimiter /(/
    syntax match pythonDelimiter /)/
    syntax match pythonEnd /:/

    hi link pythonDelimiter   Delimiter
    hi pythonEnd ctermfg=5
endfunction

autocmd FileType python call PythonCustomHighlight()
