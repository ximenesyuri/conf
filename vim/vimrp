#! /bin/vim

" PLUGIN config
    call plug#begin('~/.vim/plugged')
"> Autocompletion
"> Language Server Protocol (LSP)
    Plug 'prabirshrestha/vim-lsp'
    Plug 'mattn/vim-lsp-settings'
">> completor.vim used for path completion prefixed by envs
    Plug 'maralla/completor.vim'
    Plug 'ervandew/supertab'
">> asyncomplete.vim used in any  other case.
    Plug 'prabirshrestha/asyncomplete.vim'
    Plug 'prabirshrestha/asyncomplete-lsp.vim'
    Plug 'prabirshrestha/asyncomplete-ultisnips.vim'
    Plug 'prabirshrestha/asyncomplete-file.vim'
"> Snippets
    Plug 'SirVer/ultisnips' 
"> LSP with ALE (syntax checker)
    Plug 'dense-analysis/ale' 
    Plug 'rhysd/vim-lsp-ale' 
"> Basic Stuff
    Plug 'farmergreg/vim-lastplace'
    Plug 'tpope/vim-commentary'
    Plug 'skywind3000/asyncrun.vim'
    Plug 'Yggdroot/indentLine'
"> Highlight
    Plug 'inkarkat/vim-ingo-library'
    Plug 'inkarkat/vim-SyntaxRange'
    
    Plug 'vim-python/python-syntax'
    Plug 'powerman/vim-plugin-AnsiEsc'
"> Other
    "Plug 'madox2/vim-ai'
    Plug '/home/yx/files/dev/prj/vim/vim-ai'
    Plug 'ximenesyuri/runy'
    call plug#end()
"> Automatically install missing plugins
    autocmd VimEnter *
  \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \|   PlugInstall --sync | q
  \| endif

"NETRW
"> Layout
">> hide banner
    let g:netrw_banner = 0
">> allow toggle hide
    let g:netrw_hide= 1
">> hide dot files by default
    let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
">> windows size
    let g:netrw_winsize = 15
">> open files in new window
    if argv(0) ==# '.'
        let g:netrw_browse_split = 0
    else
        let g:netrw_browse_split = 4
    endif
">> sync current and browsing directories
    let g:netrw_keepdir = 0
">> directories on the top, files below
    let g:netrw_sort_sequence = '[\/]$,*'
">> change of directory when opening a file
    set autochdir
">> set the default application to be called with "x"
    let g:netrw_browsex_viewer= "x"
">> keep cursor position
    let g:netrw_fastbrowse = 2
">> change the highlight of markded files
    hi! link netrwMarkFile Search
">> print in /tmp/vim_cwd the current working directory when Netrw is closed
    autocmd BufDelete * if &ft ==# 'netrw' | let g:cwd = expand('%:p:h') | call writefile([g:cwd], '/tmp/vim_cwd') | endif
"> Hotkeys
    nnoremap [29~ :Lexplore<cr>cd
    inoremap [29~ <esc>:Lexplore<cr>cd
    augroup netrw_setup | au! 
        au FileType netrw  nmap [29~ :Lexplore<cr>
">> 'p' to display the current directory. 'h' to toggle hidden files
        au FileType netrw nmap <buffer> p :pwd<cr>
        au FileType netrw nmap <buffer> h gh
">> 'a' to mark files. 'w', and  'e' to execute command for marked files.
        au FileType netrw nmap <buffer> a mf
        au FileType netrw nmap <buffer> w mx
        au FileType netrw nmap <buffer> e mX
">> 'left' and 'right'/'enter' to change directory.
        au FileType netrw nmap <buffer> <right> <cr>cd
        au FileType netrw nmap <buffer> <left> -cd
">> 'r' to refresh Netrw
        au FileType netrw nmap <buffer> r <c-l>
">> 'mkf', 'd', 'D' , 'mv' and 'cp' to do the basic stuff
        au FileType netrw nmap <buffer> mkf cd:AsyncRun touch 
        au FileType netrw nmap <buffer> mkd cd:AsyncRun mkdir 
        au FileType netrw nmap <buffer> .f cd:AsyncRun touch 
        au FileType netrw nmap <buffer> .d cd:AsyncRun mkdir 
        au FileType netrw nmap <buffer> d cd:AsyncRun d 
        au FileType netrw nmap <buffer> rm cd:AsyncRun rm -r 
        au FileType netrw nmap <buffer> mv cd:AsyncRun mv 
        au FileType netrw nmap <buffer> cp cd:AsyncRun cp -r 
    augroup END

" ASYNCRUN
"> '!!' to open AsyncRun. <c-o> to open the logs window
    nnoremap !! :AsyncRun
    nnoremap <c-o> :copen<cr>
    inoremap <c-o> <esc>:copen<cr>

" VIM-COMMENTARY
" >> ',p' to comment/uncomment paragraph 
    imap <leader>p <esc>gcap:startinsert<cr>
    nmap <leader>p gcap:startinsert<cr>

" INDENTLINE
">> disabling in markdown
    let g:indentLine_fileTypeExclude = ['markdown', 'md']
    let g:indentLine_bufTypeExclude = ['help', 'terminal', 'vimwiki']
">> avoid conflict with links conceal
    let g:indentLine_concealcursor=""
    let g:indentLine_conceallevel=2
">> ',i' to toggle indentline
    inoremap <leader>i <esc>:IndentLinesToggle<cr>:startinsert<cr>
    nnoremap <leader>i :IndentLinesToggle<cr>:startinsert<cr>

" VIM-LSP
"> disable diganostics
    let g:lsp_diagnostics_enabled = 0
"> avoid automatically printing definitions
    let g:lsp_hover_ui = 'preview'
    set completeopt-=preview
    let g:lsp_document_highlight_enabled = 0
    let g:lsp_completion_documentation_enabled = 0
"> use aync completion
    let g:lsp_async_completion = 1
"> disable fold and conceal
    let g:lsp_fold_enabled = 0
    let g:lsp_hover_conceal = 0
"> set the log level to 'Error'
    let g:lsp_log_level = 4
"> ',d' to get the definition.
    nnoremap <leader>d :LspPeekDefinition<cr>
    inoremap <leader>d <esc>:LspPeekDefinition<cr>
    nnoremap <leader>d :LspPeekDefinition<cr>
    inoremap <leader>d <esc>:LspPeekDefinition<cr>
"> ',r' to get the references 
    nnoremap <leader>r :LspReferences<cr>
    inoremap <leader>r <esc>:LspReferences<cr>
  
" ALE
">> disable ALE LSP
    let g:ale_disable_lsp = 1
    let g:ale_virtualtext_cursor = 0
    let g:ale_completion_enabled = 0
    let g:ale_completion_tsserver_autoimport = 0
">> disable executing lint when start the file
    let g:ale_lint_on_enter = 0
">> disable diagnostics in insert mode
    let g:ale_lint_on_insert_leave = 0
">> set diagnostics only when saving
    let g:ale_lint_on_text_changed = 'never'
">> configuring fixers
    let g:ale_fixers = {
    \   '*': ['remove_trailing_lines', 'trim_whitespace'],
    \   'md': ['prettier'],
    \   'sh': ['shfmt'],
    \}
">> configuring linters
    let g:ale_linters = {
    \   'go' : ['vim-lsp'],
    \   'sh' : ['vim-lsp'],
    \'javascript': ['eslint'],
    \'typescript': ['eslint', 'tsserver', 'prettier'],
    \}


" ULTISNIPS
"> set the snippets directory
    let g:UltiSnipsSnippetDirectories=["ultisnippets", "intuisnippets"]
"> set the filetype
    autocmd bufnewfile *.snippets :set filetype=snippets
"> set the key to expand the snippets
    let g:UltiSnipsExpandTrigger="<s-tab>"
"> set the key to change the focus inside the snippet
    let g:UltiSnipsJumpForwardTrigger="<s-tab>"
    let g:UltiSnipsJumpBackwardTrigger="<c-tab>"

" ASYNCOMPLETE
"> set the key to move to the next item in the list
    inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
"> set the ket to close select the item and close the popup
    inoremap <expr> <cr> pumvisible() ? asyncomplete#close_popup() : "\<cr>"

" SUPERTAB
"> start completion from top to bottom
    let g:SuperTabDefaultCompletionType = "<c-n>"

" SYNTAX RANGE
">> highlight languagens in markdown files
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```bash', '```', 'bash', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```c', '```', 'c', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```cpp', '```', 'cpp', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```c++', '```', 'cpp', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```csharp', '```', 'cs', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```c#', '```', 'cs', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```css', '```', 'css', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```fsharp', '```', 'fs', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```go', '```', 'go', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```html', '```', 'html', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```java', '```', 'java', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```javascript', '```', 'javascript', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```js', '```', 'javascript', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```kotlin', '```', 'kotlin', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```lua', '```', 'lua', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```mermaid', '```', 'mermaid', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```php', '```', 'php', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```python', '```', 'python', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```ruby', '```', 'ruby', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```rust', '```', 'rust', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```swift', '```', 'swift', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('\\hltex', '\\hltex', 'tex', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```tex', '```', 'tex', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```typescript', '```', 'typescript', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```ts', '```', 'typescript', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```tui', '```', 'tui', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```vim', '```', 'vim', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```yml', '```', 'yaml', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```yaml', '```', 'yaml', 'NonText')

" VIM-CHATGPT
">> setting roles file
    let g:vim_ai_roles_config_file = '/path/to/my/roles.ini'
">> setting the default model
    let g:vim_ai_model = "gpt-4o"
">> setting the default initial prompt for ':AIChat'
    let s:initial_chat_prompt =<< trim END
    >>> system

    You asre a experienced software developer and mathematician. 
    You have read all the official documentations and replies always based on them.
    If you attach a code block add syntax type after ``` to enable syntax highlighting.
    If I ask for a code you should reply only with the code, without any explanation, among I explicit ask for more details.
    END

" >> configuring the 'AIChat' command
    let g:vim_ai_chat = {
    \  "engine": "chat",
    \  "options": {
    \    "model": g:vim_ai_model,
    \    "endpoint_url": "https://api.openai.com/v1/chat/completions",
    \    "max_tokens": 0,
    \    "temperature": 1,
    \    "request_timeout": 20,
    \    "enable_auth": 1,
    \    "selection_boundary": "",
    \    "initial_prompt": s:initial_chat_prompt,
    \  },
    \  "ui": {
    \    "code_syntax_enabled": 1,
    \    "populate_options": 0,
    \    "open_chat_command": "preset_below",
    \    "scratch_buffer_keep_open": 0,
    \    "paste_mode": 1,
    \  },
    \}

    let g:vim_ai_complete = g:vim_ai_chat
    let g:vim_ai_edit = g:vim_ai_chat
">> 'ctrl+g' to ask a question
    inoremap <c-g> <esc>:AIChat 
    nnoremap <c-g> :AIChat
    vnoremap <c-g> :AIChat
">> 'ctrl+e' in visual mode to edit
    vnoremap <c-e> :AIEdit
    
" PYTHON-SYNTAX
    let g:python_highlight_all = 1

" RUNPY
augroup RunyGroup
    autocmd!
    autocmd FileType python nnoremap <buffer> <C-d> :call Runy()<CR>
augroup END

" EVIM
"
" > KEYS
" >> indentation
if !exists('g:evim_key_add_indentation')
    let g:evim_key_add_indentation = '<tab>'
endif
if !exists('g:evim_key_remove_indentation')
    let g:evim_key_remove_indentation = '<s-tab>'
endif

function! s:setup_indentation()
    let l:add_indent_key = g:evim_key_add_indentation
    let l:remove_indent_key = g:evim_key_remove_indentation

    silent! unmap <buffer> <expr> l:add_indent_key
    silent! unmap <buffer> <expr> l:remove_indent_key

    exe 'nnoremap '.l:add_indent_key.' >>'
    exe 'nnoremap '.l:remove_indent_key.' <<' 

    exe 'vnoremap '.l:add_indent_key.' >'
    exe 'vnoremap '.l:remove_indent_key.' <lt>'
endfunction

autocmd BufReadPost,BufNewFile * call s:setup_indentation()

" > COPY
" >> copy last code block
function! s:copy_last_code_block()
    let l:save_pos = getpos('.')
    try
        let l:found = search('^\s*```[a-zA-Z]\+', 'bW')
        if l:found
            normal! j
            let l:start_content_pos = getpos('.')

            let l:end_found = search('^\s*```$', 'W')
            if l:end_found
                normal! k
                let l:end_content_pos = getpos('.')

                execute l:start_content_pos[1] . ',' . l:end_content_pos[1] . 'y+'
                echom 'Code block content copied to clipboard.'
            else
                echom 'End of code block not found.'
            endif
        else
            echom 'No code block found with a language specifier.'
        endif
    catch /.*/
        echom 'Error occurred: ' . v:exception
    endtry

    call setpos('.', l:save_pos)
endfunction

nnoremap <leader>cc :call <SID>copy_last_code_block()<CR>
