[user]
	email = yxm.dev@gmx.ie
	name = yxm
[pull]
	rebase = true
[commit]
	template = none
[init]
	defaultBranch = main

[alias] 
        back = "!f() { git reset --hard HEAD~$1; }; f"
        feat = "!f() { vars=\"$@\"; git commit -m \"feat: $vars}\"; }; f"
        fix  = "!f() { vars=\"$@\"; git commit -m \"fix: $vars\"; }; f"
        doc  = "!f() { vars=\"$@\"; git commit -m \"doc: $vars\"; }; f"
        ref  = "!f() { vars=\"$@\"; git commit -m \"ref: $vars\"; }; f"
        bla = "!f() { git commit -m \"...\"; }; f"
        info = "!git log -1 --oneline; git status"
        change = "!f() { local branch; if [ -z \"$1\" ]; then branch=$(git branch --all --format=\"%(refname:short)\" | fzf --prompt=\"Select branch: \" --height=20% --layout=reverse --border); if [ -n \"$branch\" ]; then git checkout \"$branch\"; fi; else git checkout \"$1\"; fi; }; f" 
        new-branch = checkout -b
        rm-branch = branch -D
        ammend = commit --ammend -m
        send = "!f() { if [ -z \"$1\" ]; then git push origin HEAD; else git push origin \"$1\"; fi; }; f" 
        new-tag = "!f() { \
            if [ -z \"$1\" ]; then \
                echo \"Error: Missing tag type (patch, minor, or major). Usage: git new-tag <type> ['message']\" && return 1; \
            fi; \
            latest_tag=$(git describe --tags --abbrev=0 2>/dev/null); \
            if [ -z \"$latest_tag\" ]; then \
                echo \"No existing tags found. Starting with v0.1.0\"; \
                new_tag=\"v0.1.0\"; \
            else \
                IFS='.' read major minor patch <<< \"${latest_tag#v}\"; \
                case \"$1\" in \
                    patch) patch=$((patch + 1));; \
                    minor) minor=$((minor + 1)); patch=0;; \
                    major) major=$((major + 1)); minor=0; patch=0;; \
                    *) echo \"Invalid tag type: $1. Use patch, minor, or major.\" && return 1;; \
                esac; \
                new_tag=\"v$major.$minor.$patch\"; \
            fi; \
            tag_message=\"\"; \
            if [ -n \"$2\" ]; then \
                tag_message=\"-m \\\"$2\\\"\"; \
            fi; \
            eval \"git tag $new_tag $tag_message\"; \
            echo \"Created new tag: $new_tag\"; \
        }; f"
        send-tag = "!f() { \
            target_branch=${1:-HEAD}; \
            latest_tag=$(git describe --tags --abbrev=0 2>/dev/null); \
            if [ -z \"$latest_tag\" ]; then \
                echo \"Error: No tags found to push.\" && return 1; \
            fi; \
            git push origin $latest_tag; \
            echo \"Pushed tag $latest_tag to branch $target_branch on origin.\"; \
        }; f"
        reb = "!f() { \
            num_commits=\"${1:-10}\"; \
            if ! [[ \"$num_commits\" =~ ^[0-9]+$ ]]; then \
                echo \"Error: N must be a positive integer.\"; \
                echo \"Usage: git reb [<N>]\" && return 1; \
            fi; \
            git rebase -i HEAD~\"$num_commits\"; \
        }; f"
